{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from \"../../../environments/environment\";\nexport let TicketinformationComponent = class TicketinformationComponent {\n  constructor(http, eventsService) {\n    this.http = http;\n    this.eventsService = eventsService;\n    this.tickets = [];\n    this.events = [];\n    this.baseApiUrl = environment.baseapiUrl;\n    this.searchText = '';\n  }\n  searchTickets() {\n    this.tickets = [];\n    this.http.get(this.baseApiUrl + '/api/payments/' + this.searchText).subscribe({\n      next: ticketRequest => {\n        this.tickets = ticketRequest;\n        this.loadEventDetailsForTickets();\n      },\n      error: error => {\n        console.error('Error fetching tickets:', error);\n        // Handle the error, e.g., display an error message to the user\n      }\n    });\n  }\n\n  loadEventDetailsForTickets() {\n    for (const ticket of this.tickets) {\n      // Make an HTTP request to fetch event data based on ticket.eventId\n      this.eventsService.getEvent(ticket.ticketEventId).subscribe({\n        next: eventData => {\n          // Assign event data to the ticket\n          this.events.push(eventData);\n        },\n        error: error => {\n          console.error('Error fetching event data for ticket:', error);\n          // Handle the error, e.g., display an error message to the user\n        }\n      });\n    }\n  }\n};\n\nTicketinformationComponent = __decorate([Component({\n  selector: 'app-ticketinformation',\n  templateUrl: './ticketinformation.component.html',\n  styleUrls: ['./ticketinformation.component.css']\n})], TicketinformationComponent);","map":{"version":3,"names":["Component","environment","TicketinformationComponent","constructor","http","eventsService","tickets","events","baseApiUrl","baseapiUrl","searchText","searchTickets","get","subscribe","next","ticketRequest","loadEventDetailsForTickets","error","console","ticket","getEvent","ticketEventId","eventData","push","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\D program files\\projectsdotnet\\angular\\second\\Ticket.UI\\src\\app\\components\\ticketinformation\\ticketinformation.component.ts"],"sourcesContent":["import {Component} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {environment} from \"../../../environments/environment\";\nimport {TicketModel} from \"../../models/ticket.model\";\nimport {EventsService} from \"../../services/events.service\";\nimport {EventModel} from \"../../models/event.model\";\n\n@Component({\n  selector: 'app-ticketinformation',\n  templateUrl: './ticketinformation.component.html',\n  styleUrls: ['./ticketinformation.component.css']\n})\nexport class TicketinformationComponent {\n\n  constructor(private http: HttpClient,private eventsService:EventsService) {\n\n  }\n  tickets: TicketModel[] = [];\n  events:EventModel[]=[];\n  baseApiUrl: string = environment.baseapiUrl;\n  searchText: string = '';\n\n  searchTickets(){\n    this.tickets=[]\n    this.http.get<TicketModel[]>(this.baseApiUrl + '/api/payments/' + this.searchText).subscribe({\n      next: (ticketRequest) => {\n        this.tickets=ticketRequest;\n        this.loadEventDetailsForTickets()\n      },error: (error) => {\n        console.error('Error fetching tickets:', error);\n        // Handle the error, e.g., display an error message to the user\n      }\n    });\n  }\n  loadEventDetailsForTickets() {\n    for (const ticket of this.tickets) {\n      // Make an HTTP request to fetch event data based on ticket.eventId\n      this.eventsService.getEvent(ticket.ticketEventId).subscribe({\n        next: (eventData) => {\n          // Assign event data to the ticket\n          this.events.push(eventData);\n        },\n        error: (error) => {\n          console.error('Error fetching event data for ticket:', error);\n          // Handle the error, e.g., display an error message to the user\n        }\n      });\n    }\n  }\n\n}\n"],"mappings":";AAAA,SAAQA,SAAS,QAAO,eAAe;AAEvC,SAAQC,WAAW,QAAO,mCAAmC;AAUtD,WAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAErCC,YAAoBC,IAAgB,EAASC,aAA2B;IAApD,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,aAAa,GAAbA,aAAa;IAG1D,KAAAC,OAAO,GAAkB,EAAE;IAC3B,KAAAC,MAAM,GAAc,EAAE;IACtB,KAAAC,UAAU,GAAWP,WAAW,CAACQ,UAAU;IAC3C,KAAAC,UAAU,GAAW,EAAE;EAJvB;EAMAC,aAAaA,CAAA;IACX,IAAI,CAACL,OAAO,GAAC,EAAE;IACf,IAAI,CAACF,IAAI,CAACQ,GAAG,CAAgB,IAAI,CAACJ,UAAU,GAAG,gBAAgB,GAAG,IAAI,CAACE,UAAU,CAAC,CAACG,SAAS,CAAC;MAC3FC,IAAI,EAAGC,aAAa,IAAI;QACtB,IAAI,CAACT,OAAO,GAACS,aAAa;QAC1B,IAAI,CAACC,0BAA0B,EAAE;MACnC,CAAC;MAACC,KAAK,EAAGA,KAAK,IAAI;QACjBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF;KACD,CAAC;EACJ;;EACAD,0BAA0BA,CAAA;IACxB,KAAK,MAAMG,MAAM,IAAI,IAAI,CAACb,OAAO,EAAE;MACjC;MACA,IAAI,CAACD,aAAa,CAACe,QAAQ,CAACD,MAAM,CAACE,aAAa,CAAC,CAACR,SAAS,CAAC;QAC1DC,IAAI,EAAGQ,SAAS,IAAI;UAClB;UACA,IAAI,CAACf,MAAM,CAACgB,IAAI,CAACD,SAAS,CAAC;QAC7B,CAAC;QACDL,KAAK,EAAGA,KAAK,IAAI;UACfC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;UAC7D;QACF;OACD,CAAC;;EAEN;CAED;;AAtCYf,0BAA0B,GAAAsB,UAAA,EALtCxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACWzB,0BAA0B,CAsCtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}