{"ast":null,"code":"var _class;\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventsService {\n  constructor(http) {\n    this.http = http;\n    this.baseApiUrl = environment.baseapiUrl;\n  }\n  getAllEvents() {\n    return this.http.get(this.baseApiUrl + \"/api/eventsapi\");\n  }\n  getEvent(id) {\n    return this.http.get(this.baseApiUrl + \"/api/eventsapi/\" + id);\n  }\n  createEvent(newEvent) {\n    return this.http.post(this.baseApiUrl + \"/api/eventsapi\", newEvent);\n  }\n  updateEvent(id, updatedEvent) {\n    return this.http.put(this.baseApiUrl + \"/api/eventsapi/\" + id, updatedEvent);\n  }\n  deleteEvent(id) {\n    return this.http.delete(this.baseApiUrl + \"/api/eventsapi/\" + id);\n  }\n}\n_class = EventsService;\n_class.ɵfac = function EventsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","EventsService","constructor","http","baseApiUrl","baseapiUrl","getAllEvents","get","getEvent","id","createEvent","newEvent","post","updateEvent","updatedEvent","put","deleteEvent","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\D program files\\projectsdotnet\\angular\\second\\Ticket.UI\\src\\app\\services\\events.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {EventModel} from \"../models/event.model\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventsService {\n\n  baseApiUrl:string=environment.baseapiUrl;\n  constructor(private http:HttpClient) { }\n\n  getAllEvents() : Observable<EventModel[]>{\n    return this.http.get<EventModel[]>(this.baseApiUrl+\"/api/eventsapi\");\n  }\n  getEvent(id:string) :Observable<EventModel>{\n    return this.http.get<EventModel>(this.baseApiUrl+\"/api/eventsapi/\"+id);\n  }\n\n  createEvent(newEvent: EventModel): Observable<EventModel> {\n    return this.http.post<EventModel>(this.baseApiUrl + \"/api/eventsapi\", newEvent);\n  }\n\n  updateEvent(id: string, updatedEvent: EventModel): Observable<EventModel> {\n    return this.http.put<EventModel>(this.baseApiUrl + \"/api/eventsapi/\" + id, updatedEvent);\n  }\n\n  deleteEvent(id: string): Observable<void> {\n    return this.http.delete<void>(this.baseApiUrl + \"/api/eventsapi/\" + id);\n  }\n\n}\n"],"mappings":";AAEA,SAAQA,WAAW,QAAO,gCAAgC;;;AAO1D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,UAAU,GAAQJ,WAAW,CAACK,UAAU;EACD;EAEvCC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAe,IAAI,CAACH,UAAU,GAAC,gBAAgB,CAAC;EACtE;EACAI,QAAQA,CAACC,EAAS;IAChB,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAa,IAAI,CAACH,UAAU,GAAC,iBAAiB,GAACK,EAAE,CAAC;EACxE;EAEAC,WAAWA,CAACC,QAAoB;IAC9B,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAa,IAAI,CAACR,UAAU,GAAG,gBAAgB,EAAEO,QAAQ,CAAC;EACjF;EAEAE,WAAWA,CAACJ,EAAU,EAAEK,YAAwB;IAC9C,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAa,IAAI,CAACX,UAAU,GAAG,iBAAiB,GAAGK,EAAE,EAAEK,YAAY,CAAC;EAC1F;EAEAE,WAAWA,CAACP,EAAU;IACpB,OAAO,IAAI,CAACN,IAAI,CAACc,MAAM,CAAO,IAAI,CAACb,UAAU,GAAG,iBAAiB,GAAGK,EAAE,CAAC;EACzE;;SAtBWR,aAAa;;mBAAbA,MAAa,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAbpB,MAAa;EAAAqB,OAAA,EAAbrB,MAAa,CAAAsB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}